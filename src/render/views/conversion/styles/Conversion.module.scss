@use "sass:math";
@use '@render/views/animations' as animate;
@import url('https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap');


$ease-out-circular: cubic-bezier(0.075, 0.82, 0.165, 1);
$ease-custom: cubic-bezier(.58, -0.02, .32, 1.02);

@keyframes enable_pointer {
  0% {
    pointer-events: none
  }

  99% {
    pointer-events: none
  }

  100% {
    pointer-events: auto
  }
}

.container {
  position: absolute;
  display: grid;
  place-items: center;
  pointer-events: none;
  & *{
    pointer-events: auto;
  }
  .bubble {
    position: absolute;
    bottom: calc(100% + 15px);

    width: var(--initialWidth);
    max-width: 300px;
    height: 3em;

    font-size: 14px;

    cursor: pointer;

    border-radius: 9px;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    z-index: 999;

    transition: 500ms $ease-custom;
    will-change: height, max-width;

    $slide-distance: 20px;
    $slide-in-props: 500ms $ease-custom;

    /*
     There are two layers of backdrop blur:
        - Bubble -> Background
        - Group Title -> Group rows
      The problem is that backdrop filter's don't stack in an intuitive sense. 
      If the bubble applies a backdrop filter then its descendents can't apply 
      filters to each other.
      -Example: https://codepen.io/kelmorsy/pen/NWOmwxK?
      
      To mitigate this with relatively little overhead, the outer blur was moved to a psuedo 
      element attached to the bubble, taking the effect out of the bubble's main content heirarchy.
      
      The caveat is the bubble is now an ancestor of the element applying the main blur, making it 
      a backdrop root candidate. If it has an opacity < 1 it becomes the backdrop root,  breaking 
      the blur for anything behind it. An we can't have nice fade animations without changing the opacity.
      So opacity animations are applied directly to the psuedo element and duplicated for the bubble's 
      contents (.conversions), emulating a single animation. This is implemented for both in/out animations.
    */

    &::before {
      backdrop-filter: blur(17px);
      content: '';
      height: 100%;
      width: 100%;
      position: absolute;
      top: 0;
      left: 0;
      border-radius: inherit;
      z-index: -1;
      box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
      background-color: rgba(255, 255, 255, 0.5);
      @include animate.slide($y: $slide-distance, $props: $slide-in-props , $extend: enable_pointer 300ms);
    }

    &:hover:not(.expanded) {
      transform: translateY(3%);
    }

    &.expanded {
      width: var(--expandedWidth);
      height: var(--expandedHeight);
      max-height: 200px;
      cursor: default;
    }

    &.out:not(.expanded) {

      &::before,
      .conversions {
        @include animate.slide($y: $slide-distance, $props: 200ms reverse);
      }

      pointer-events: none;
    }

    &.out.expanded {

      &::before,
      .conversions {
        @include animate.slide($y: 10%, $props: 300ms reverse);
      }

      height: 0;
      max-width: 100px;
    }

    .conversions {
      width: 100%;
      height: auto;

      box-sizing: border-box;
      padding: 0 10px;
      margin: 0 0;

      display: flex;
      gap: 15px;
      flex-grow: 0;
      flex-direction: column;
      justify-content: start;
      align-items: start;

      font-family: 'DM Sans', Arial, Helvetica, sans-serif;
      color: black;
      @include animate.slide($y: $slide-distance, $props: $slide-in-props , $extend: enable_pointer 300ms);

      transition: 300ms ease-out, flex-grow 1000ms;

      $scrollbarWidth: 10px;

      &::-webkit-scrollbar-thumb {
        width: $scrollbarWidth;
        background-color: lightgray;
        background-clip: padding-box;
        border-radius: 10px;
        border: 3px solid transparent;
      }

      &::-webkit-scrollbar {
        width: $scrollbarWidth;
      }
    }

    &.expanded .conversions {
      overflow-y: auto;
      overflow-x: hidden;
      overscroll-behavior: contain;

      flex-grow: 1;
      margin: 1em 0;

      .group {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 2px;

        .groupTitle {
          margin: 0;
          margin-bottom: 5px;
          color: dimgray;
          position: sticky;
          top: 3px;
          z-index: 1;
          padding: 5px 8px;
          box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.4);
          background-color: rgba(whitesmoke, 0.7);
          backdrop-filter: blur(5px);
          border-radius: 5px;
        }

        .row {
          margin: 4px 0;
        }
      }

      @for $i from 1 to 100 {
        $delay: 40;
        $initial-delay: 100;

        & .row:nth-child(#{$i}) {
          $child-delay: $i*$delay;
          $max-delay: $delay*20;

          @include animate.slide($x: 30px, $props: 250ms ease-out both #{$initial-delay + math.min($child-delay, $max-delay)}ms);
        }
      }
    }

    .search {
      width: 80%;
      $search-height: 30px;
      flex: 0 0 auto;
      padding: 6px 4px;
      margin: 0;
      will-change: height;
      @include animate.property(height, 0px, $search-height, 500ms cubic-bezier(0.16, 1, 0.3, 1) both);

      display: grid;
      place-content: center;

      overflow: clip;

      border: none;
      border-bottom: lightgray solid 1px;

      color: slategray;
      font-size: 1.2em;
      font-family: 'DM Sans', sans-serif;

      pointer-events: none;
    }
  }

  .hoverArea {
    position: absolute;
    box-sizing: content-box;
    display: box;

    width: calc(100% + 10px);
    height: calc(100% + 0.25lh);
    padding: max(6px, 10%) max(3px, 5%);

    $final-opacity: 0.125;
    opacity: $final-opacity;

    border-radius: 3px;
    background-color: turquoise;

    $fade-fly-in-duration: 400ms;
    $strong-opacity: 0.25;

    $fly: unique-id();
    @include animate.fly($y: 15%, $name: $fly);

    $fade-in: unique-id();

    @include animate.animation($name: $fade-in) {
      from {
        opacity: 0
      }

      to {
        opacity: $strong-opacity
      }
    }

    $fade-fly-props: $fade-fly-in-duration ease-in-out;

    $fade-back: unique-id();

    @include animate.animation($name: $fade-back) {
      from {
        opacity: $strong-opacity
      }

      to {
        opacity: $final-opacity
      }
    }

    animation: $fly $fade-fly-props,
    $fade-in $fade-fly-props,
    $fade-back 200ms ease-out $fade-fly-in-duration;
    transition: 300ms ease-out;

    &:active {
      pointer-events: none; // Trick to allow hover hovents with click through
    }

    &:hover {
      opacity: $strong-opacity
    }

    // Extended invisible hover area between range and bubble for the mouse to move
    // through without hiding the bubble
    &::after {
      display: none;

      content: "";
      position: absolute;
      left: 0;

      // Set with JS. Depends on if the bubble is above or below the selection
      --top: unset;
      --bottom: unset;
      bottom: var(--bottom);
      top: var(--top);

      height: calc(100% + 30px);
      width: 100%;
    }

    &.extendedArea::after,
    &:hover::after {
      display: block;
    }
  }
}

.hiddenContainer {
  visibility: hidden;

  * {
    animation: none !important;
    transition: none !important;
  }
}
